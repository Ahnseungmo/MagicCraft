#pragma once


struct Room {
    int x, y, w, h; // 좌상단 좌표, 크기
    int cx() const { return x + w / 2; }
    int cy() const { return y + h / 2; }
};

class MapGenerator {
public:
    MapGenerator(int width, int height, int roomCount);
    void generate();
    bool isOverlap(const Room& a, const Room& b);
    int overlapLen(int a1, int a2, int b1, int b2);
    void placeRoomsRadially();
    void carveRoom(const Room& room, int room_id);
    void generateRoomInterior(Room& room, int room_id);

    void mergeBoundary(const Room& a, const Room& b, int dir);

    vector<vector<int>> GetMapData() { return map; }
private:
    const int MAP_WIDTH = 200;
    const int MAP_HEIGHT = 150;
    const int ROOM_MAX = 40;
    const int ROOM_MIN_SIZE = 12;
    const int ROOM_MAX_SIZE = 20;
    const int MIN_OVERLAP = 3; // 방이 붙을 때 최소 겹치는 칸 수

    const int FLOOR = 0;
    const int WALL = 1;
    const int WATER = 2;

    const int PLAYER_SPAWN = 3;
    const int ENEMY_SPAWN = 4;
    const int BOSS_ENEMY = 5;

    int width, height, roomCount;

    vector<vector<int>> map;
    vector<vector<int>> room_id_map;
    vector<Room> rooms;
    mt19937 rng;
    unordered_map<int, vector<pair<int, int>>> room_connections; // 방별 연결 경계 좌표

    // 보스 방 미리 준비된 배치들
    vector<vector<vector<int>>> bossLayouts = {
        // 패턴 1: 중앙 원형 공간 (연결 경계 주변에 바닥 보장)
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        },
        // 패턴 2: 십자형 공간 (연결 경계 주변에 바닥 보장)
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        },
        // 패턴 3: 대각선 패턴 (연결 경계 주변에 바닥 보장)
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0},
            {0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,2,2,0,0,0},
            {0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0},
            {0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0},
            {0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,0,0,0,0},
            {0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,2,2,0,0,0},
            {0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        },
        // 패턴 4: 미로형 패턴 (연결 경계 주변에 바닥 보장)
        {
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
        }
    };

    int bossLayoutSizeX = bossLayouts.at(0).at(0).size();
    int bossLayoutSizeY = bossLayouts.at(0).size();



};